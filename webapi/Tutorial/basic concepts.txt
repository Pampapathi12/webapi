To build a comprehensive Web API in ASP.NET Core that incorporates all key concepts for **data handling**, **response management**, and **SQL stored procedure execution**, here’s an implementation and explanation:

---

### Features Covered:
1. **Entity Framework Core with CRUD operations**.
2. **Stored Procedure Integration**.
3. **Custom Response Management**.
4. **DTOs for Data Transfer**.
5. **Error Handling (Try-Catch)**.
6. **Asynchronous Programming for Scalability**.
7. **Model Validation**.

---

### Full Implementation

#### **Setup**
Assume a SQL database with a `Products` table and a stored procedure `GetProductsByCategory`.

---

#### **Controller Code**

```csharp
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using webapi.Data; // Assuming the DbContext exists here
using webapi.Models; // Contains entity and DTO definitions
using webapi.Responses; // Custom response handling

namespace webapi.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ProductController : ControllerBase
    {
        private readonly ApplicationDBContext _context;

        public ProductController(ApplicationDBContext context)
        {
            _context = context;
        }

        // 1. GET: Get All Products
        [HttpGet]
        public async Task<IActionResult> GetAllProducts()
        {
            try
            {
                var products = await _context.Products.ToListAsync();
                return Ok(new ApiResponse<List<Product>>(true, "Products retrieved successfully.", products));
            }
            catch (System.Exception ex)
            {
                return StatusCode(500, new ApiResponse<string>(false, "An error occurred.", ex.Message));
            }
        }

        // 2. GET: Get Product by ID
        [HttpGet("{id:int}")]
        public async Task<IActionResult> GetProductById(int id)
        {
            try
            {
                var product = await _context.Products.FindAsync(id);
                if (product == null)
                {
                    return NotFound(new ApiResponse<string>(false, "Product not found."));
                }

                return Ok(new ApiResponse<Product>(true, "Product retrieved successfully.", product));
            }
            catch (System.Exception ex)
            {
                return StatusCode(500, new ApiResponse<string>(false, "An error occurred.", ex.Message));
            }
        }

        // 3. POST: Add a Product
        [HttpPost]
        public async Task<IActionResult> AddProduct([FromBody] ProductDTO productDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new ApiResponse<string>(false, "Invalid data provided.", ModelState));
            }

            try
            {
                var product = new Product
                {
                    Name = productDto.Name,
                    Category = productDto.Category,
                    Price = productDto.Price
                };

                _context.Products.Add(product);
                await _context.SaveChangesAsync();

                return CreatedAtAction(nameof(GetProductById), new { id = product.Id },
                    new ApiResponse<Product>(true, "Product added successfully.", product));
            }
            catch (System.Exception ex)
            {
                return StatusCode(500, new ApiResponse<string>(false, "An error occurred.", ex.Message));
            }
        }

        // 4. PUT: Update a Product
        [HttpPut("{id:int}")]
        public async Task<IActionResult> UpdateProduct(int id, [FromBody] ProductDTO productDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new ApiResponse<string>(false, "Invalid data provided.", ModelState));
            }

            try
            {
                var existingProduct = await _context.Products.FindAsync(id);
                if (existingProduct == null)
                {
                    return NotFound(new ApiResponse<string>(false, "Product not found."));
                }

                existingProduct.Name = productDto.Name;
                existingProduct.Category = productDto.Category;
                existingProduct.Price = productDto.Price;

                _context.Products.Update(existingProduct);
                await _context.SaveChangesAsync();

                return Ok(new ApiResponse<Product>(true, "Product updated successfully.", existingProduct));
            }
            catch (System.Exception ex)
            {
                return StatusCode(500, new ApiResponse<string>(false, "An error occurred.", ex.Message));
            }
        }

        // 5. DELETE: Delete a Product
        [HttpDelete("{id:int}")]
        public async Task<IActionResult> DeleteProduct(int id)
        {
            try
            {
                var product = await _context.Products.FindAsync(id);
                if (product == null)
                {
                    return NotFound(new ApiResponse<string>(false, "Product not found."));
                }

                _context.Products.Remove(product);
                await _context.SaveChangesAsync();

                return Ok(new ApiResponse<string>(true, "Product deleted successfully."));
            }
            catch (System.Exception ex)
            {
                return StatusCode(500, new ApiResponse<string>(false, "An error occurred.", ex.Message));
            }
        }

        // 6. Call a Stored Procedure
        [HttpGet("category/{category}")]
        public async Task<IActionResult> GetProductsByCategory(string category)
        {
            try
            {
                var products = await _context.Products
                    .FromSqlRaw("EXEC GetProductsByCategory @Category = {0}", category)
                    .ToListAsync();

                return Ok(new ApiResponse<List<Product>>(true, "Products retrieved by category.", products));
            }
            catch (System.Exception ex)
            {
                return StatusCode(500, new ApiResponse<string>(false, "An error occurred.", ex.Message));
            }
        }
    }
}
```

---

#### **Key Concepts Explained**

1. **Entity Framework Core**:
   - **`DbSet<Product>`**: Represents the `Products` table.
   - **`_context.Products.ToListAsync()`**: Retrieves all rows asynchronously.
   - **`FromSqlRaw`**: Executes raw SQL queries (e.g., stored procedures).

2. **Asynchronous Programming**:
   - Use of `async` and `await` improves scalability by releasing threads during I/O operations.

3. **Stored Procedures**:
   - Executes `GetProductsByCategory` stored procedure using `FromSqlRaw`.

4. **DTO (Data Transfer Object)**:
   - Used `ProductDTO` to validate and transfer data between API and client.

5. **Validation**:
   - **`ModelState.IsValid`** ensures data sent by the client is valid based on the DTO's annotations.

6. **Custom Response Wrapping**:
   - Encapsulates responses in a consistent structure using `ApiResponse<T>`.

7. **Error Handling**:
   - Comprehensive error handling with `try-catch`.
   - Returns appropriate HTTP status codes.

---

#### **Models and DTO**

```csharp
namespace webapi.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public decimal Price { get; set; }
    }

    public class ProductDTO
    {
        [Required]
        public string Name { get; set; }
        [Required]
        public string Category { get; set; }
        [Range(0.1, double.MaxValue, ErrorMessage = "Price must be greater than zero.")]
        public decimal Price { get; set; }
    }
}
```

---

#### **Custom API Response Wrapper**

```csharp
namespace webapi.Responses
{
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }

        public ApiResponse(bool success, string message, T data = default)
        {
            Success = success;
            Message = message;
            Data = data;
        }
    }
}
```

---

#### **SQL Stored Procedure**
```sql
CREATE PROCEDURE GetProductsByCategory
    @Category NVARCHAR(50)
AS
BEGIN
    SELECT * FROM Products WHERE Category = @Category
END
```

---

This implementation demonstrates a complete Web API following modern development practices with proper data handling, response structuring, validation, and database integration using stored procedures.


When building a **Web API** in ASP.NET Core, the following key concepts are essential to ensure a robust, scalable, and maintainable solution. Here's a detailed explanation of all the major concepts required:

---

## **1. Routing**
### **Definition**: Mapping incoming HTTP requests to controller actions.
- **Attribute Routing**: Use attributes like `[HttpGet]`, `[HttpPost]`, `[HttpPut]`, `[HttpDelete]`.
  ```csharp
  [HttpGet("products/{id}")]
  public IActionResult GetProduct(int id) { ... }
  ```
- **Conventional Routing**: Configured in `Startup.cs` (or `Program.cs` in .NET 6+).
  ```csharp
  app.UseEndpoints(endpoints =>
  {
      endpoints.MapControllerRoute(
          name: "default",
          pattern: "{controller=Home}/{action=Index}/{id?}");
  });
  ```

---

## **2. Dependency Injection (DI)**
### **Definition**: Injecting required services like `DbContext` into controllers.
- **Example**:
  ```csharp
  public class ProductController : ControllerBase
  {
      private readonly ApplicationDbContext _context;

      public ProductController(ApplicationDbContext context)
      {
          _context = context;
      }
  }
  ```
- **Why?** Promotes loose coupling, testability, and modular design.

---

## **3. HTTP Methods**
### **Definition**: Implementing REST principles using standard HTTP verbs.
- **GET**: Retrieve data.
- **POST**: Create resources.
- **PUT/PATCH**: Update resources.
- **DELETE**: Delete resources.

Example:
```csharp
[HttpGet]
public IActionResult GetAll() { ... }

[HttpPost]
public IActionResult Create([FromBody] Product product) { ... }
```

---

## **4. Model Binding and Validation**
### **Model Binding**: Automatically maps HTTP request data to method parameters or model objects.
- Example:
  ```csharp
  [HttpPost]
  public IActionResult Create([FromBody] Product product) { ... }
  ```

### **Model Validation**: Use `DataAnnotations` to validate incoming data.
- Example:
  ```csharp
  public class Product
  {
      [Required]
      public string Name { get; set; }

      [Range(1, 10000)]
      public decimal Price { get; set; }
  }
  ```

- **Validating Models**:
  ```csharp
  if (!ModelState.IsValid)
  {
      return BadRequest(ModelState);
  }
  ```

---

## **5. Response Handling**
### **Standard Response Types**:
- **`Ok()`**: HTTP 200 with optional data.
- **`BadRequest()`**: HTTP 400 for validation errors.
- **`NotFound()`**: HTTP 404 if the resource doesn't exist.
- **`StatusCode()`**: For custom status codes.

Example:
```csharp
if (product == null)
    return NotFound();

return Ok(product);
```

### **Custom Response Wrappers**:
Encapsulate responses in a consistent structure.
```csharp
public class ApiResponse<T>
{
    public bool Success { get; set; }
    public string Message { get; set; }
    public T Data { get; set; }

    public ApiResponse(bool success, string message, T data = default)
    {
        Success = success;
        Message = message;
        Data = data;
    }
}
```

---

## **6. Entity Framework Core**
### **Definition**: ORM to interact with databases.
- **DbContext**: Represents the database session.
  ```csharp
  public class ApplicationDbContext : DbContext
  {
      public DbSet<Product> Products { get; set; }
  }
  ```

- **CRUD Operations**:
  ```csharp
  // Create
  _context.Products.Add(product);
  await _context.SaveChangesAsync();

  // Read
  var products = await _context.Products.ToListAsync();

  // Update
  _context.Products.Update(product);
  await _context.SaveChangesAsync();

  // Delete
  _context.Products.Remove(product);
  await _context.SaveChangesAsync();
  ```

---

## **7. Stored Procedures**
### **Calling Stored Procedures**:
```csharp
var products = await _context.Products
    .FromSqlRaw("EXEC GetProductsByCategory @Category={0}", category)
    .ToListAsync();
```

---

## **8. Middleware**
### **Definition**: Process HTTP requests in a pipeline.
- Example Middleware:
  - **Authentication**
  - **Logging**
  - **Error Handling**
  ```csharp
  app.UseMiddleware<CustomMiddleware>();
  ```

---

## **9. Exception Handling**
### **Global Error Handling**:
Use `UseExceptionHandler` middleware.
```csharp
app.UseExceptionHandler(errorApp =>
{
    errorApp.Run(async context =>
    {
        context.Response.ContentType = "application/json";
        context.Response.StatusCode = 500;
        await context.Response.WriteAsync("An unexpected error occurred.");
    });
});
```

---

## **10. Asynchronous Programming**
### **Why?** Improves scalability by freeing threads during I/O operations.
- Use `async` and `await`:
  ```csharp
  [HttpGet]
  public async Task<IActionResult> GetProducts()
  {
      var products = await _context.Products.ToListAsync();
      return Ok(products);
  }
  ```

---

## **11. Filters**
### **Definition**: Logic that runs before/after controller actions.
- **Action Filters**: Example: Logging.
- **Exception Filters**: Handle unhandled exceptions.
- Example:
  ```csharp
  public class LogActionFilter : IActionFilter
  {
      public void OnActionExecuting(ActionExecutingContext context)
      {
          // Logic before action
      }

      public void OnActionExecuted(ActionExecutedContext context)
      {
          // Logic after action
      }
  }
  ```

---

## **12. Authentication and Authorization**
### **Authentication**: Verifying user identity.
- Use JWT, OAuth, or cookie-based authentication.
- Example with JWT:
  ```csharp
  services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
      .AddJwtBearer(options =>
      {
          options.TokenValidationParameters = new TokenValidationParameters
          {
              ValidateIssuer = true,
              ValidateAudience = true,
              ...
          };
      });
  ```

### **Authorization**: Controlling access.
- **Role-Based**:
  ```csharp
  [Authorize(Roles = "Admin")]
  ```

- **Policy-Based**:
  ```csharp
  services.AddAuthorization(options =>
  {
      options.AddPolicy("RequireAdmin", policy => policy.RequireRole("Admin"));
  });
  ```

---

## **13. Versioning**
### **Why?** Support multiple API versions.
```csharp
services.AddApiVersioning(options =>
{
    options.AssumeDefaultVersionWhenUnspecified = true;
    options.DefaultApiVersion = new ApiVersion(1, 0);
});
```

- Version Controllers:
  ```csharp
  [ApiVersion("1.0")]
  [Route("api/v{version:apiVersion}/[controller]")]
  public class ProductController : ControllerBase { ... }
  ```

---

## **14. Logging**
### **Using ILogger**:
```csharp
private readonly ILogger<ProductController> _logger;

public ProductController(ILogger<ProductController> logger)
{
    _logger = logger;
}

_logger.LogInformation("Fetching products...");
```

---

## **15. Testing**
### **Unit Testing**:
Mock services (e.g., `DbContext`) and verify controller logic using tools like **xUnit** or **NUnit**.
```csharp
var mockDbContext = new Mock<ApplicationDbContext>();
var controller = new ProductController(mockDbContext.Object);

var result = await controller.GetProducts();
Assert.IsType<OkObjectResult>(result);
```

---

### Summary Table

| **Concept**          | **Why It’s Needed**                                                            |
|-----------------------|-------------------------------------------------------------------------------|
| Routing               | Maps requests to the appropriate action.                                     |
| Dependency Injection  | Injects services like `DbContext`, `ILogger`.                                |
| HTTP Methods          | Implements RESTful principles.                                               |
| Model Binding         | Maps HTTP data to method parameters/models.                                  |
| Model Validation      | Validates input data using annotations.                                      |
| Response Handling     | Standardized responses for success and errors.                              |
| Entity Framework Core | Simplifies database interactions.                                            |
| Stored Procedures     | Executes SQL stored procedures for complex queries.                         |
| Middleware            | Handles request/response logic centrally (e.g., logging, errors).           |
| Exception Handling    | Manages and logs unexpected errors globally.                                 |
| Asynchronous Code     | Improves scalability and performance.                                        |
| Filters               | Pre-/post-action logic like logging, caching, etc.                          |
| Authentication        | Verifies user identity (e.g., JWT).                                          |
| Authorization         | Controls access based on roles or policies.                                 |
| Versioning            | Supports backward compatibility.                                            |
| Logging               | Tracks application behavior and issues.                                     |
| Testing               | Ensures reliability through unit/integration tests.                         |

---

Would you like detailed implementations or examples for any specific concept?